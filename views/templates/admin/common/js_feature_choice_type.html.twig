
<script>
  const featureListId = '{{  featureListId|default('#form_feature_id') }}';
  const featureValueListId = '{{ featureValuesListId|default('#form_feature_id_val') }}';

  $(document).ready(function(){
  const choiceActionList = document.querySelector('#form_feature_method');
  const featureList = document.querySelector(featureListId);
  const featureValuesList = document.querySelector(featureValueListId);

  const manipulateInputsView = (showItems = true) => {
  if(showItems){
  featureValuesList.parentElement.parentElement.classList.remove('d-none');
  featureList.parentElement.parentElement.classList.remove('d-none');
}else{
  featureValuesList.parentElement.parentElement.classList.add('d-none');
  featureList.parentElement.parentElement.classList.add('d-none');
}
}

  const checkSelectedAction = (element) => {
    console.log(element)
  const choiceActionSelectedOption = element.options[element.selectedIndex].value
  manipulateInputsView(true)

  if(choiceActionSelectedOption === 'remove_feature'){
  featureValuesList.parentElement.parentElement.classList.add('d-none');
}
  if(choiceActionSelectedOption === 'delete_all'){
  manipulateInputsView(false)
  featureValuesList.parentElement.parentElement.classList.add('d-none');
}
}


  const loadFeatureValues = (featureValList, featureList, firstPageLoad = false) => {
  Array.from(featureValList.options).forEach(item => {
  item.dataset.feature_id === featureList.options[featureList.selectedIndex].value ? (item.hidden = false) : (item.hidden = true)
})
  if(!firstPageLoad){
  Array.from(featureValList.options).every(item => {
  if(item.hidden === false){
  item.selected = true;
  return false;
}else{
  item.selected = false;
}
  return true
})
}

}

  loadFeatureValues(featureValuesList, featureList, true)


  featureList.addEventListener('change', e => {
  loadFeatureValues(featureValuesList, featureList);
});
  if(choiceActionList != null){
    checkSelectedAction(choiceActionList)
    choiceActionList.addEventListener('change', e => {
      checkSelectedAction(choiceActionList)
    })
  }


      window.prestashop.component.initComponents([
        'Grid',
      ]);
      // Learn more about components in documentation
      // https://devdocs.prestashop.com/1.7/development/components/global-components/
      const grid = new window.prestashop.component.Grid('bulkFeatureManagerGrid');
      grid.addExtension(new window.prestashop.component.GridExtensions.ColumnTogglingExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.ExportToSqlManagerExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.FiltersResetExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.SortingExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.LinkRowActionExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.BulkActionCheckboxExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.SubmitRowActionExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.AsyncToggleColumnExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.BulkOpenTabsExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.ChoiceExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.FiltersSubmitButtonEnablerExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.ModalFormSubmitExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.ReloadListExtension());
      grid.addExtension(new window.prestashop.component.GridExtensions.SubmitBulkActionExtension());


  })
</script>
